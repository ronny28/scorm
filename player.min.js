var scorm = {},
    prefix = "",
    storage = "",
    increment = 0;

function supports_html5_storage() { try { return "localStorage" in window && null !== window.localStorage } catch (o) { return !1 } }

function Set_Scorm_Values(o, t, e, n) {
    var c = e;
    let r = (e = t + e).match(/([0-9]+)\.cmi\.interactions\.([0-9]+)\.id/);
    if (null != r && o.setItem(t + ".cmi.interactions._count", parseInt(r[2]) + 1), null != (r = e.match(/([0-9]+)\.cmi\.interactions\.([0-9]+)\.result/))) {
        var i = o.getItem(t + "cmi.interactions." + parseInt(r[2]) + ".id");
        window.scormStatus.detailed_answers[i] = n, scorm.scormTrack.detailed_answers[i] = n
    }
    e === t + "cmi.core.lesson_status" && (window.scormStatus.lesson_status = n), e === t + "cmi.core.score.raw" && (window.scormStatus.score_raw = n), e === t + "cmi.core.score.max" && (window.scormStatus.score_max = n, scorm.scormTrack["cmi.core.score.max"] = n), e === t + "cmi.core.score.min" && (window.scormStatus.score_min = n, scorm.scormTrack["cmi.core.score.min"] = n), e === t + "cmi.core.session_time" && (window.scormStatus.session_time = n, scorm.scormTrack["cmi.core.session_time"] = n), e === t + "x.start.time" && (scorm.scormTrack["x.start.time"] = n), e === t + "cmi.core.total_time" && (window.scormStatus.total_time = n, scorm.scormTrack["cmi.core.total_time"] = n), e === t + "cmi.suspend_data" && (scorm.scormTrack["cmi.suspend_data"] = n), o.setItem(e, n), scorm.scormTrack[c] = n, console.log("LMSSetValue", e, "=", n)
}

function Get_Scorm_Value(o, t, e) {
    var n = e;
    e = t + e;
    let c = o.getItem(e);
    return c && null !== c || (c = getScormValue(n)), null == c && -1 !== e.indexOf("_count", this.length - "_count".length) && (c = 0, o.setItem(e, c)), console.log("LMSGetValue", e, "=", c), c
}

function initScormAPI() {
    var o = document.getElementById("packageId");
    e = "", o && (e = o.value + ".");
    var t = document.getElementById("scormId"),
        e = "";
    t && (e = t.value + ".");
    var n = document.getElementById("scorm");
    n && (scorm = JSON.parse(atob(n.value)));
    var c = document.getElementById("scormtrack"),
        r = null;
    if (c && (r = JSON.parse(atob(c.value))), r && (scorm.scormTrack = r), scorm && !scorm.scormTrack) scorm.scormTrack = {};
    else {
        for (const o in scorm.scormTrack) console.log(`${o}: ${scorm.scormTrack[o]}`), window.API_1484_11 && setValueToPath(window.API_1484_11, o, scorm.scormTrack[o]), window.API && setValueToPath(window.API, o, scorm.scormTrack[o]);
        console.log("Updated window.API Scorm tracks from local storage : ", window.API)
    }
    window.scormStatus = { lesson_status: "", score_raw: 0, score_max: 100, score_min: 0, session_time: 0, detailed_answers: {}, start_time: 0, total_time: 0 }, initScormAPI2004(window, window.localStorage, e, o => { console.log("initScormAPI2004 progress : ", o), console.log("initScormAPI2004 scorm.scormTrack : ", scorm.scormTrack), saveScormTracker(), saveScormCompletion(scorm) }), initScormAPI1214(window, window.localStorage, e, o => { console.log("initScormAPI1214 progress : ", o), console.log("initScormAPI1214 scorm.scormTrack : ", scorm.scormTrack), saveScormTracker(), saveScormCompletion(scorm) }), setTimeout(() => { sendToParent(window.scormStatus) }, 2e3)
}

function setValueToPath(o, t, e) {
    for (var n = t.split("."), c = o; n.length - 1;) {
        var r = n.shift();
        r in c || (c[r] = {}), c = c[r]
    }
    c[n[0]] = e
}

function initScormAPI2004(o, t, e, n) {
    e = void 0 !== e ? e : "", n = void 0 !== n ? n : console.log, o.API_1484_11.on("Initialize", function() { console.log("Scorm 2004 initialized : ") }), o.API_1484_11.on("Terminate", function() {
        console.log("Scorm 2004 Terminate : ");
        var t = o.API_1484_11.cmi.toJSON();
        console.log("simplifiedObject Scorm : ", t), o.API_1484_11.reset()
    }), o.API_1484_11.on("GetValue", function(o) { return console.log("Scorm 2004 GetValue : ", o), Get_Scorm_Value(t, e, o) }), o.API_1484_11.on("SetValue", function(o, n) { return console.log("Scorm 2004 SetValue : ", o, n), Set_Scorm_Values(t, e, o, n) }), o.API_1484_11.on("Commit", function() { return console.log("Scorm 2004 Commit : "), n(o.scormStatus), !0 }), o.API_1484_11.on("GetLastError", function() { console.log("Scorm 2004 GetLastError : ") }), o.API_1484_11.on("GetErrorString", function() { console.log("Scorm 2004 GetErrorString : ") }), o.API_1484_11.on("GetDiagnostic", function() { console.log("Scorm 2004 GetDiagnostic : ") })
}

function initScormAPI1214(o, t, e, n) {
    e = void 0 !== e ? e : "", n = void 0 !== n ? n : console.log, o.API.on("LMSInitialize", function() { console.log("Scorm 1.2+ initialized : ") }), o.API.on("LMSFinish", function() {
        console.log("Scorm 1.2+ LMSFinish : ");
        var t = o.API.cmi.toJSON();
        console.log("simplifiedObject Scorm : ", t), o.API.reset()
    }), o.API.on("LMSGetValue", function(o) { return console.log("Scorm 1.2+ LMSGetValue : ", o), Get_Scorm_Value(t, e, o) }), o.API.on("LMSSetValue", function(o, n) { return console.log("Scorm 1.2+ LMSSetValue : ", o, n), Set_Scorm_Values(t, e, o, n) }), o.API.on("LMSCommit", function() { return console.log("Scorm 1.2+ LMSCommit : "), n(o.scormStatus), !0 }), o.API.on("LMSGetLastError", function() { console.log("Scorm 1.2+ LMSGetLastError : ") }), o.API.on("LMSGetErrorString", function(o) { console.log("Scorm 1.2+ LMSGetErrorString : ", o) }), o.API.on("LMSGetDiagnostic", function(o) { console.log("Scorm 1.2+ LMSGetDiagnostic : ", o) })
}

function saveScormCompletion(o) { if (o.scormTrack) { const t = o.scormTrack; "passed" === t["cmi.core.lesson_status"] || "completed" === t["cmi.core.lesson_status"] ? (o.completionstatus = "Y", saveContentCompletionData(o)) : o.completionstatus && "Y" === o.completionstatus ? (o.completionstatus = "Y", saveContentCompletionData(o)) : (o.completionstatus = "UP", saveContentCompletionData(o)) } else o.completionstatus && "Y" !== o.completionstatus && (o.completionstatus = "UP"), saveContentCompletionData(o) }

function saveActivityCompletionData(o) {
    var t = populateActivityCompletion(o);
    console.log("Scorm Activity data - ", t), 8 != o.roleId && 10 != o.roleId || $.ajax({
        url: "/api/studentPortal/activitycompletion",
        dataType: "json",
        type: "post",
        contentType: "application/json",
        data: JSON.stringify(t),
        success: function(t, e, n) {
            console.log(t);
            var c = t;
            void 0 !== o.activitycompletionid && o.activitycompletionid || (o.activitycompletionid = c.data[0][0].lastid)
        },
        error: function(o, t, e) { console.log(e) }
    })
}

function saveContentCompletionData(o) {
    var t = populateContentCompletion(o);
    console.log("Scorm Activity data - ", t), 8 != o.roleId && 10 != o.roleId || $.ajax({ url: "/api/learn/contentcompletion", dataType: "json", type: "post", headers: { Authorization: o.authToken }, contentType: "application/json", data: JSON.stringify(t), success: function(t, e, n) { console.log("Scorm Activity completion res", t); var c = t;!0 === c.type && (34 == o.areaId ? o.cont_comp_Id = c.data[0][0].lastid : 34 != o.areaId && (o.activitycompletionid = c.data[0][0].lastid, o.act_comp_Id = c.data[0][0].lastid), postEvent(o, c)) }, error: function(o, t, e) { console.log(e) } })
}

function postEvent(o, t) { window.parent.postMessage({ message: { scormData: o, scormRes: t } }, "*") }

function populateContentCompletion(o) { if (o) { return { act_comp_Id: o.activitycompletionid, cont_comp_Id: o.cont_comp_Id, contentId: o.contentId, id: o.usrId, enrolId: o.enrolId, completiontype: o.completiontype, activityId: o.activityId || o.instanceId, completionstatus: o.completionstatus, completionstate: void 0 === o.completionstate ? 0 : o.completionstate, contentwatchedtime: o.contentwatchedtime, contenttime: o.contenttime, languageId: o.defaultlangId ? o.defaultlangId : 1, tenantId: o.tenantId, moduleId: o.moduleId, courseId: o.courseId, wfId: o.wfId ? o.wfId : null, stepId: o.stepId ? o.stepId : null } } return null }

function populateActivityCompletion(o) { if (o) { return { id: o.activitycompletionid, activityId: o.activityId, contentwatchedtime: o.contentwatchedtime, contenttime: o.contenttime, enrolId: o.enrolId, moduleId: o.moduleId, courseId: o.courseId, userid: o.usrId, tenantId: o.tenantId, viewed: 1, completionstatus: o.completionstatus, completionstate: void 0 === o.completionstate ? 0 : o.completionstate, languageId: o.defaultlangId ? o.defaultlangId : 1, act_comp_Id: o.act_comp_Id, completiontype: o.completiontype, cont_comp_Id: o.cont_comp_Id } } return null }

function saveScormTracker() {
    var o = populateScormDetail(scorm);
    console.log("trackList - ", o), increment++, console.log("Increment - ", increment), sendToParent(window.scormStatus), 8 != scorm.roleId && 10 != scorm.roleId || "Y" == scorm.completionstatus || $.ajax({ url: "/app/web/saveScormTrackers", dataType: "json", type: "post", contentType: "application/json", data: JSON.stringify(o), success: function(o, t, e) { console.log(o) }, error: function(o, t, e) { console.log(e) } })
}

function populateScormDetail(o) {
    var t = [];
    if (o && o.scormTrack) {
        var e = o.scormTrack;
        for (var n in e) {
            var c = { usrId: o.usrId, empId: isUndefined(o.employeeId) ? 0 : o.employeeId, actId: o.activityId, scormid: o.contentRepId, enrolId: isUndefined(o.enrolId) ? 0 : o.enrolId, attempt: isUndefined(o.attempt) ? 1 : parseInt(o.attempt) + 1, element: null, value: null };
            e.hasOwnProperty(n) && (console.log("Key is " + n + ", value is" + e[n]), c.element = n, c.value = "detailed_answers" === n ? JSON.stringify(e[n]) : e[n]), c.element && t.push(c)
        }
    }
    return t
}

function getScormValue(o) { return scorm.scormTrack ? scorm.scormTrack[o] : null }

function isUndefined(o) { return void 0 === o || null == o }

function decrypt(o) { return JSON.parse(Base64.decode(decodeURIComponent(escape(atob(o))))) }
supports_html5_storage() || (window.localStorage = {});
var Base64 = {
        _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        encode: function(o) {
            var t, e, n, c, r, i, a, s = "",
                l = 0;
            for (o = Base64._utf8_encode(o); l < o.length;) c = (t = o.charCodeAt(l++)) >> 2, r = (3 & t) << 4 | (e = o.charCodeAt(l++)) >> 4, i = (15 & e) << 2 | (n = o.charCodeAt(l++)) >> 6, a = 63 & n, isNaN(e) ? i = a = 64 : isNaN(n) && (a = 64), s = s + this._keyStr.charAt(c) + this._keyStr.charAt(r) + this._keyStr.charAt(i) + this._keyStr.charAt(a);
            return s
        },
        decode: function(o) {
            var t, e, n, c, r, i, a = "",
                s = 0;
            for (o = o.replace(/[^A-Za-z0-9\+\/\=]/g, ""); s < o.length;) t = this._keyStr.indexOf(o.charAt(s++)) << 2 | (c = this._keyStr.indexOf(o.charAt(s++))) >> 4, e = (15 & c) << 4 | (r = this._keyStr.indexOf(o.charAt(s++))) >> 2, n = (3 & r) << 6 | (i = this._keyStr.indexOf(o.charAt(s++))), a += String.fromCharCode(t), 64 != r && (a += String.fromCharCode(e)), 64 != i && (a += String.fromCharCode(n));
            return a = Base64._utf8_decode(a)
        },
        _utf8_encode: function(o) {
            o = o.replace(/\r\n/g, "\n");
            for (var t = "", e = 0; e < o.length; e++) {
                var n = o.charCodeAt(e);
                n < 128 ? t += String.fromCharCode(n) : n > 127 && n < 2048 ? (t += String.fromCharCode(n >> 6 | 192), t += String.fromCharCode(63 & n | 128)) : (t += String.fromCharCode(n >> 12 | 224), t += String.fromCharCode(n >> 6 & 63 | 128), t += String.fromCharCode(63 & n | 128))
            }
            return t
        },
        _utf8_decode: function(o) { for (var t = "", e = 0, n = c1 = c2 = 0; e < o.length;)(n = o.charCodeAt(e)) < 128 ? (t += String.fromCharCode(n), e++) : n > 191 && n < 224 ? (c2 = o.charCodeAt(e + 1), t += String.fromCharCode((31 & n) << 6 | 63 & c2), e += 2) : (c2 = o.charCodeAt(e + 1), c3 = o.charCodeAt(e + 2), t += String.fromCharCode((15 & n) << 12 | (63 & c2) << 6 | 63 & c3), e += 3); return t }
    },
    html = null,
    child = new AcrossTabs.default.Child({ onReady: onReady, onInitialize: onInitialize, handshakeExpiryLimit: 4e3, onParentDisconnect: onParentDisconnect, onParentCommunication: onParentCommunication });

function onParentDisconnect() { showList("<li>Uhh no! Parent disconnected :(</li>"), window.close() }

function sendToParent(o) {
    var t = { msg: o, id: child.getTabInfo().id };
    child.sendMessageToParent(t)
}

function closeTab() { window.close() }

function onInitialize() {}

function onReady() { showList("<li>Loaded</li>") }

function onParentCommunication(o) { showList("<li>Message recieved from parent - " + o + "</li>") }

function showList(o) { html += o }